{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IMDBPersonSearchResolver = void 0;\nconst constants_1 = require(\"../constants\");\nconst ResolverCacheManager_1 = require(\"../utils/ResolverCacheManager\");\nconst cheerio_1 = require(\"cheerio\");\nconst formatHTMLText_1 = require(\"../utils/formatHTMLText\");\nconst enums_1 = require(\"../enums\");\nconst convertIMDBPathToIMDBUrl_1 = require(\"../utils/convertIMDBPathToIMDBUrl\");\nconst extractIMDBIdFromUrl_1 = require(\"../utils/extractIMDBIdFromUrl\");\nconst requestClient_1 = require(\"../requestClient\");\nclass IMDBPersonSearchResolver {\n  constructor(queryName, {\n    exactMatch = false\n  } = {}) {\n    this.resolverCacheManager = new ResolverCacheManager_1.ResolverCacheManager();\n    this.queryName = queryName;\n    this.exactMatch = exactMatch;\n  }\n  async getResult() {\n    await this.loadSearchPageHTMLData();\n    const unsortedSearchResultList = this.originalResultList;\n    // do sort and filters\n    const finalResult = unsortedSearchResultList.sort((a, b) => b.matchScore - a.matchScore);\n    return finalResult;\n  }\n  async loadSearchPageHTMLData() {\n    // getting result from imdb page by http request\n    const result = await (0, requestClient_1.getRequest)(constants_1.IMDB_TITLE_SEARCH_URL, {\n      q: this.queryName,\n      exact: this.exactMatch,\n      s: \"nm\"\n    });\n    // parse page content for jquery like\n    this.searchPageHTMLData = result.data;\n    this.searchPageCheerio = (0, cheerio_1.load)(this.searchPageHTMLData);\n  }\n  get originalResultList() {\n    const $ = this.searchPageCheerio;\n    const isType1 = !!$(\".find-name-result\").length;\n    if (isType1) {\n      return this.originalResultListType1;\n    }\n    return this.originalResultListType2;\n  }\n  get originalResultListType1() {\n    const cacheDataManager = this.resolverCacheManager.load(\"originalResultList\");\n    if (cacheDataManager.hasData) {\n      return cacheDataManager.data;\n    }\n    const result = [];\n    const $ = this.searchPageCheerio;\n    $(\".find-name-result\").each((i, el) => {\n      const sourceUrl = (0, convertIMDBPathToIMDBUrl_1.convertIMDBPathToIMDBUrl)($(el).find(\"a\").first().attr(\"href\"));\n      result.push({\n        matchScore: 20 - i > 0 ? 20 - i : 1,\n        name: (0, formatHTMLText_1.formatHTMLText)($(el).find(\".ipc-metadata-list-summary-item__t\").first().text()),\n        source: {\n          sourceType: enums_1.Source.IMDB,\n          sourceUrl,\n          sourceId: (0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(sourceUrl, \"nm\")\n        },\n        thumbnailImageUrl: $(el).find(\"img\").first().attr(\"src\") ?? \"\",\n        url: sourceUrl\n      });\n    });\n    return cacheDataManager.cacheAndReturnData(result);\n  }\n  get originalResultListType2() {\n    const cacheDataManager = this.resolverCacheManager.load(\"originalResultList\");\n    if (cacheDataManager.hasData) {\n      return cacheDataManager.data;\n    }\n    const result = [];\n    const $ = this.searchPageCheerio;\n    $(\"tr.findResult\").each((i, el) => {\n      const sourceUrl = (0, convertIMDBPathToIMDBUrl_1.convertIMDBPathToIMDBUrl)($(el).find(\"a\").first().attr(\"href\"));\n      result.push({\n        matchScore: 20 - i > 0 ? 20 - i : 1,\n        name: (0, formatHTMLText_1.formatHTMLText)($(el).find(\".result_text a\").first().text()),\n        source: {\n          sourceType: enums_1.Source.IMDB,\n          sourceUrl,\n          sourceId: (0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(sourceUrl, \"nm\")\n        },\n        thumbnailImageUrl: $(el).find(\"img\").first().attr(\"src\") ?? \"\",\n        url: sourceUrl\n      });\n    });\n    return cacheDataManager.cacheAndReturnData(result);\n  }\n}\nexports.IMDBPersonSearchResolver = IMDBPersonSearchResolver;","map":{"version":3,"names":["Object","defineProperty","exports","value","IMDBPersonSearchResolver","constants_1","require","ResolverCacheManager_1","cheerio_1","formatHTMLText_1","enums_1","convertIMDBPathToIMDBUrl_1","extractIMDBIdFromUrl_1","requestClient_1","constructor","queryName","exactMatch","resolverCacheManager","ResolverCacheManager","getResult","loadSearchPageHTMLData","unsortedSearchResultList","originalResultList","finalResult","sort","a","b","matchScore","result","getRequest","IMDB_TITLE_SEARCH_URL","q","exact","s","searchPageHTMLData","data","searchPageCheerio","load","$","isType1","length","originalResultListType1","originalResultListType2","cacheDataManager","hasData","each","i","el","sourceUrl","convertIMDBPathToIMDBUrl","find","first","attr","push","name","formatHTMLText","text","source","sourceType","Source","IMDB","sourceId","extractIMDBIdFromUrl","thumbnailImageUrl","url","cacheAndReturnData"],"sources":["/Users/divyashriravichandran/Desktop/Web Dev/Movie Info App/movie-info-app/node_modules/movier/dist/src/resolvers/IMDBPersonSearchResolver.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IMDBPersonSearchResolver = void 0;\nconst constants_1 = require(\"../constants\");\nconst ResolverCacheManager_1 = require(\"../utils/ResolverCacheManager\");\nconst cheerio_1 = require(\"cheerio\");\nconst formatHTMLText_1 = require(\"../utils/formatHTMLText\");\nconst enums_1 = require(\"../enums\");\nconst convertIMDBPathToIMDBUrl_1 = require(\"../utils/convertIMDBPathToIMDBUrl\");\nconst extractIMDBIdFromUrl_1 = require(\"../utils/extractIMDBIdFromUrl\");\nconst requestClient_1 = require(\"../requestClient\");\nclass IMDBPersonSearchResolver {\n    constructor(queryName, { exactMatch = false } = {}) {\n        this.resolverCacheManager = new ResolverCacheManager_1.ResolverCacheManager();\n        this.queryName = queryName;\n        this.exactMatch = exactMatch;\n    }\n    async getResult() {\n        await this.loadSearchPageHTMLData();\n        const unsortedSearchResultList = this.originalResultList;\n        // do sort and filters\n        const finalResult = unsortedSearchResultList.sort((a, b) => b.matchScore - a.matchScore);\n        return finalResult;\n    }\n    async loadSearchPageHTMLData() {\n        // getting result from imdb page by http request\n        const result = await (0, requestClient_1.getRequest)(constants_1.IMDB_TITLE_SEARCH_URL, {\n            q: this.queryName,\n            exact: this.exactMatch,\n            s: \"nm\",\n        });\n        // parse page content for jquery like\n        this.searchPageHTMLData = result.data;\n        this.searchPageCheerio = (0, cheerio_1.load)(this.searchPageHTMLData);\n    }\n    get originalResultList() {\n        const $ = this.searchPageCheerio;\n        const isType1 = !!$(\".find-name-result\").length;\n        if (isType1) {\n            return this.originalResultListType1;\n        }\n        return this.originalResultListType2;\n    }\n    get originalResultListType1() {\n        const cacheDataManager = this.resolverCacheManager.load(\"originalResultList\");\n        if (cacheDataManager.hasData) {\n            return cacheDataManager.data;\n        }\n        const result = [];\n        const $ = this.searchPageCheerio;\n        $(\".find-name-result\").each((i, el) => {\n            const sourceUrl = (0, convertIMDBPathToIMDBUrl_1.convertIMDBPathToIMDBUrl)($(el).find(\"a\").first().attr(\"href\"));\n            result.push({\n                matchScore: 20 - i > 0 ? 20 - i : 1,\n                name: (0, formatHTMLText_1.formatHTMLText)($(el).find(\".ipc-metadata-list-summary-item__t\").first().text()),\n                source: {\n                    sourceType: enums_1.Source.IMDB,\n                    sourceUrl,\n                    sourceId: (0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(sourceUrl, \"nm\"),\n                },\n                thumbnailImageUrl: $(el).find(\"img\").first().attr(\"src\") ?? \"\",\n                url: sourceUrl,\n            });\n        });\n        return cacheDataManager.cacheAndReturnData(result);\n    }\n    get originalResultListType2() {\n        const cacheDataManager = this.resolverCacheManager.load(\"originalResultList\");\n        if (cacheDataManager.hasData) {\n            return cacheDataManager.data;\n        }\n        const result = [];\n        const $ = this.searchPageCheerio;\n        $(\"tr.findResult\").each((i, el) => {\n            const sourceUrl = (0, convertIMDBPathToIMDBUrl_1.convertIMDBPathToIMDBUrl)($(el).find(\"a\").first().attr(\"href\"));\n            result.push({\n                matchScore: 20 - i > 0 ? 20 - i : 1,\n                name: (0, formatHTMLText_1.formatHTMLText)($(el).find(\".result_text a\").first().text()),\n                source: {\n                    sourceType: enums_1.Source.IMDB,\n                    sourceUrl,\n                    sourceId: (0, extractIMDBIdFromUrl_1.extractIMDBIdFromUrl)(sourceUrl, \"nm\"),\n                },\n                thumbnailImageUrl: $(el).find(\"img\").first().attr(\"src\") ?? \"\",\n                url: sourceUrl,\n            });\n        });\n        return cacheDataManager.cacheAndReturnData(result);\n    }\n}\nexports.IMDBPersonSearchResolver = IMDBPersonSearchResolver;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}