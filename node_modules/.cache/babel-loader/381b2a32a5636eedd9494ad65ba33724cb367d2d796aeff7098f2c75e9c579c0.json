{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPersonDetailsByIMDBId = exports.getPersonDetailsByName = exports.getPersonDetailsByFoundedPersonDetails = exports.getPersonDetailsByUrl = void 0;\nconst enums_1 = require(\"./enums\");\nconst personSearcher_1 = require(\"./personSearcher\");\nconst IMDBPersonDetailsResolver_1 = require(\"./resolvers/IMDBPersonDetailsResolver\");\nconst convertIMDBTitleIdToUrl_1 = require(\"./utils/convertIMDBTitleIdToUrl\");\nconst guessSourceTypeByUrl_1 = require(\"./utils/guessSourceTypeByUrl\");\nasync function getPersonDetailsByUrl(titleUrl) {\n  const sourceType = (0, guessSourceTypeByUrl_1.guessSourceTypeByUrl)(titleUrl);\n  //  select the resolver\n  let resolver;\n  switch (sourceType) {\n    case enums_1.Source.IMDB:\n    default:\n      resolver = new IMDBPersonDetailsResolver_1.IMDBPersonDetailsResolver(titleUrl);\n  }\n  // get details from resolver\n  let result;\n  try {\n    result = await resolver.getDetails();\n  } catch (e) {\n    throw new Error(\"failed to get the result from IMDB : \" + e.message);\n  }\n  if (!result) {\n    throw new Error(\"there was a problem in getting title details, title resolver returned empty data\");\n  }\n  return result;\n}\nexports.getPersonDetailsByUrl = getPersonDetailsByUrl;\nasync function getPersonDetailsByFoundedPersonDetails(foundedTitleDetails) {\n  return getPersonDetailsByUrl(foundedTitleDetails.url);\n}\nexports.getPersonDetailsByFoundedPersonDetails = getPersonDetailsByFoundedPersonDetails;\nasync function getPersonDetailsByName(personName, {\n  exactMatch = false\n} = {}) {\n  const allResults = await (0, personSearcher_1.searchPersonByName)(personName, {\n    exactMatch\n  });\n  if (!allResults.length) {\n    throw new Error(`there wasn't any matched person with the given name : '${personName}'`);\n  }\n  return getPersonDetailsByFoundedPersonDetails(allResults[0]);\n}\nexports.getPersonDetailsByName = getPersonDetailsByName;\nasync function getPersonDetailsByIMDBId(personId) {\n  return getPersonDetailsByUrl((0, convertIMDBTitleIdToUrl_1.convertIMDBTitleIdToUrl)(personId, enums_1.IMDBPathType.Name));\n}\nexports.getPersonDetailsByIMDBId = getPersonDetailsByIMDBId;","map":{"version":3,"names":["Object","defineProperty","exports","value","getPersonDetailsByIMDBId","getPersonDetailsByName","getPersonDetailsByFoundedPersonDetails","getPersonDetailsByUrl","enums_1","require","personSearcher_1","IMDBPersonDetailsResolver_1","convertIMDBTitleIdToUrl_1","guessSourceTypeByUrl_1","titleUrl","sourceType","guessSourceTypeByUrl","resolver","Source","IMDB","IMDBPersonDetailsResolver","result","getDetails","e","Error","message","foundedTitleDetails","url","personName","exactMatch","allResults","searchPersonByName","length","personId","convertIMDBTitleIdToUrl","IMDBPathType","Name"],"sources":["/Users/divyashriravichandran/Desktop/Web Dev/Movie Info App/movie-info-app/node_modules/movier/dist/src/personDetailGetter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPersonDetailsByIMDBId = exports.getPersonDetailsByName = exports.getPersonDetailsByFoundedPersonDetails = exports.getPersonDetailsByUrl = void 0;\nconst enums_1 = require(\"./enums\");\nconst personSearcher_1 = require(\"./personSearcher\");\nconst IMDBPersonDetailsResolver_1 = require(\"./resolvers/IMDBPersonDetailsResolver\");\nconst convertIMDBTitleIdToUrl_1 = require(\"./utils/convertIMDBTitleIdToUrl\");\nconst guessSourceTypeByUrl_1 = require(\"./utils/guessSourceTypeByUrl\");\nasync function getPersonDetailsByUrl(titleUrl) {\n    const sourceType = (0, guessSourceTypeByUrl_1.guessSourceTypeByUrl)(titleUrl);\n    //  select the resolver\n    let resolver;\n    switch (sourceType) {\n        case enums_1.Source.IMDB:\n        default:\n            resolver = new IMDBPersonDetailsResolver_1.IMDBPersonDetailsResolver(titleUrl);\n    }\n    // get details from resolver\n    let result;\n    try {\n        result = await resolver.getDetails();\n    }\n    catch (e) {\n        throw new Error(\"failed to get the result from IMDB : \" + e.message);\n    }\n    if (!result) {\n        throw new Error(\"there was a problem in getting title details, title resolver returned empty data\");\n    }\n    return result;\n}\nexports.getPersonDetailsByUrl = getPersonDetailsByUrl;\nasync function getPersonDetailsByFoundedPersonDetails(foundedTitleDetails) {\n    return getPersonDetailsByUrl(foundedTitleDetails.url);\n}\nexports.getPersonDetailsByFoundedPersonDetails = getPersonDetailsByFoundedPersonDetails;\nasync function getPersonDetailsByName(personName, { exactMatch = false } = {}) {\n    const allResults = await (0, personSearcher_1.searchPersonByName)(personName, {\n        exactMatch,\n    });\n    if (!allResults.length) {\n        throw new Error(`there wasn't any matched person with the given name : '${personName}'`);\n    }\n    return getPersonDetailsByFoundedPersonDetails(allResults[0]);\n}\nexports.getPersonDetailsByName = getPersonDetailsByName;\nasync function getPersonDetailsByIMDBId(personId) {\n    return getPersonDetailsByUrl((0, convertIMDBTitleIdToUrl_1.convertIMDBTitleIdToUrl)(personId, enums_1.IMDBPathType.Name));\n}\nexports.getPersonDetailsByIMDBId = getPersonDetailsByIMDBId;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,wBAAwB,GAAGF,OAAO,CAACG,sBAAsB,GAAGH,OAAO,CAACI,sCAAsC,GAAGJ,OAAO,CAACK,qBAAqB,GAAG,KAAK,CAAC;AAC3J,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACpD,MAAME,2BAA2B,GAAGF,OAAO,CAAC,uCAAuC,CAAC;AACpF,MAAMG,yBAAyB,GAAGH,OAAO,CAAC,iCAAiC,CAAC;AAC5E,MAAMI,sBAAsB,GAAGJ,OAAO,CAAC,8BAA8B,CAAC;AACtE,eAAeF,qBAAqBA,CAACO,QAAQ,EAAE;EAC3C,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAEF,sBAAsB,CAACG,oBAAoB,EAAEF,QAAQ,CAAC;EAC7E;EACA,IAAIG,QAAQ;EACZ,QAAQF,UAAU;IACd,KAAKP,OAAO,CAACU,MAAM,CAACC,IAAI;IACxB;MACIF,QAAQ,GAAG,IAAIN,2BAA2B,CAACS,yBAAyB,CAACN,QAAQ,CAAC;EACtF;EACA;EACA,IAAIO,MAAM;EACV,IAAI;IACAA,MAAM,GAAG,MAAMJ,QAAQ,CAACK,UAAU,CAAC,CAAC;EACxC,CAAC,CACD,OAAOC,CAAC,EAAE;IACN,MAAM,IAAIC,KAAK,CAAC,uCAAuC,GAAGD,CAAC,CAACE,OAAO,CAAC;EACxE;EACA,IAAI,CAACJ,MAAM,EAAE;IACT,MAAM,IAAIG,KAAK,CAAC,kFAAkF,CAAC;EACvG;EACA,OAAOH,MAAM;AACjB;AACAnB,OAAO,CAACK,qBAAqB,GAAGA,qBAAqB;AACrD,eAAeD,sCAAsCA,CAACoB,mBAAmB,EAAE;EACvE,OAAOnB,qBAAqB,CAACmB,mBAAmB,CAACC,GAAG,CAAC;AACzD;AACAzB,OAAO,CAACI,sCAAsC,GAAGA,sCAAsC;AACvF,eAAeD,sBAAsBA,CAACuB,UAAU,EAAE;EAAEC,UAAU,GAAG;AAAM,CAAC,GAAG,CAAC,CAAC,EAAE;EAC3E,MAAMC,UAAU,GAAG,MAAM,CAAC,CAAC,EAAEpB,gBAAgB,CAACqB,kBAAkB,EAAEH,UAAU,EAAE;IAC1EC;EACJ,CAAC,CAAC;EACF,IAAI,CAACC,UAAU,CAACE,MAAM,EAAE;IACpB,MAAM,IAAIR,KAAK,CAAC,0DAA0DI,UAAU,GAAG,CAAC;EAC5F;EACA,OAAOtB,sCAAsC,CAACwB,UAAU,CAAC,CAAC,CAAC,CAAC;AAChE;AACA5B,OAAO,CAACG,sBAAsB,GAAGA,sBAAsB;AACvD,eAAeD,wBAAwBA,CAAC6B,QAAQ,EAAE;EAC9C,OAAO1B,qBAAqB,CAAC,CAAC,CAAC,EAAEK,yBAAyB,CAACsB,uBAAuB,EAAED,QAAQ,EAAEzB,OAAO,CAAC2B,YAAY,CAACC,IAAI,CAAC,CAAC;AAC7H;AACAlC,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}