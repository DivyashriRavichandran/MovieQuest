{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveRequestDocument = void 0;\nconst graphql_1 = require(\"graphql\");\n/**\n * helpers\n */\nconst extractOperationName = document => {\n  let operationName = undefined;\n  const operationDefinitions = document.definitions.filter(definition => definition.kind === `OperationDefinition`);\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0]?.name?.value;\n  }\n  return operationName;\n};\nconst resolveRequestDocument = document => {\n  if (typeof document === `string`) {\n    let operationName = undefined;\n    try {\n      const parsedDocument = (0, graphql_1.parse)(document);\n      operationName = extractOperationName(parsedDocument);\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n    return {\n      query: document,\n      operationName\n    };\n  }\n  const operationName = extractOperationName(document);\n  return {\n    query: (0, graphql_1.print)(document),\n    operationName\n  };\n};\nexports.resolveRequestDocument = resolveRequestDocument;","map":{"version":3,"names":["graphql_1","require","extractOperationName","document","operationName","undefined","operationDefinitions","definitions","filter","definition","kind","length","name","value","resolveRequestDocument","parsedDocument","parse","err","query","print","exports"],"sources":["/Users/divyashriravichandran/Desktop/Web Dev/Movie Info App/movie-info-app/node_modules/graphql-request/src/resolveRequestDocument.ts"],"sourcesContent":["import type { RequestDocument } from './types.js'\nimport type { DocumentNode, OperationDefinitionNode } from 'graphql'\nimport { parse, print } from 'graphql'\n\n/**\n * helpers\n */\n\nconst extractOperationName = (document: DocumentNode): string | undefined => {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === `OperationDefinition`\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0]?.name?.value\n  }\n\n  return operationName\n}\n\nexport const resolveRequestDocument = (\n  document: RequestDocument\n): { query: string; operationName?: string } => {\n  if (typeof document === `string`) {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n"],"mappings":";;;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AAEA;;;AAIA,MAAMC,oBAAoB,GAAIC,QAAsB,IAAwB;EAC1E,IAAIC,aAAa,GAAGC,SAAS;EAE7B,MAAMC,oBAAoB,GAAGH,QAAQ,CAACI,WAAW,CAACC,MAAM,CACrDC,UAAU,IAAKA,UAAU,CAACC,IAAI,KAAK,qBAAqB,CAC7B;EAE9B,IAAIJ,oBAAoB,CAACK,MAAM,KAAK,CAAC,EAAE;IACrCP,aAAa,GAAGE,oBAAoB,CAAC,CAAC,CAAC,EAAEM,IAAI,EAAEC,KAAK;;EAGtD,OAAOT,aAAa;AACtB,CAAC;AAEM,MAAMU,sBAAsB,GACjCX,QAAyB,IACoB;EAC7C,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAChC,IAAIC,aAAa,GAAGC,SAAS;IAE7B,IAAI;MACF,MAAMU,cAAc,GAAG,IAAAf,SAAA,CAAAgB,KAAK,EAACb,QAAQ,CAAC;MACtCC,aAAa,GAAGF,oBAAoB,CAACa,cAAc,CAAC;KACrD,CAAC,OAAOE,GAAG,EAAE;MACZ;IAAA;IAGF,OAAO;MAAEC,KAAK,EAAEf,QAAQ;MAAEC;IAAa,CAAE;;EAG3C,MAAMA,aAAa,GAAGF,oBAAoB,CAACC,QAAQ,CAAC;EAEpD,OAAO;IAAEe,KAAK,EAAE,IAAAlB,SAAA,CAAAmB,KAAK,EAAChB,QAAQ,CAAC;IAAEC;EAAa,CAAE;AAClD,CAAC;AAnBYgB,OAAA,CAAAN,sBAAsB,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}