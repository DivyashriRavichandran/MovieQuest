{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst defaultJsonSerializer_js_1 = require(\"./defaultJsonSerializer.js\");\nconst extract_files_1 = require(\"extract-files\");\nconst form_data_1 = __importDefault(require(\"form-data\"));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nconst isExtractableFileEnhanced = value => (0, extract_files_1.isExtractableFile)(value) || value !== null && typeof value === `object` && typeof value.pipe === `function`;\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nconst createRequestBody = (query, variables, operationName, jsonSerializer = defaultJsonSerializer_js_1.defaultJsonSerializer) => {\n  const {\n    clone,\n    files\n  } = (0, extract_files_1.extractFiles)({\n    query,\n    variables,\n    operationName\n  }, ``, isExtractableFileEnhanced);\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return jsonSerializer.stringify(clone);\n    }\n    if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n      throw new Error(`Cannot create request body with given variable type, array expected`);\n    }\n    // Batch support\n    const payload = query.reduce((accu, currentQuery, index) => {\n      accu.push({\n        query: currentQuery,\n        variables: variables ? variables[index] : undefined\n      });\n      return accu;\n    }, []);\n    return jsonSerializer.stringify(payload);\n  }\n  const Form = typeof FormData === `undefined` ? form_data_1.default : FormData;\n  const form = new Form();\n  form.append(`operations`, jsonSerializer.stringify(clone));\n  const map = {};\n  let i = 0;\n  files.forEach(paths => {\n    map[++i] = paths;\n  });\n  form.append(`map`, jsonSerializer.stringify(map));\n  i = 0;\n  files.forEach((paths, file) => {\n    form.append(`${++i}`, file);\n  });\n  return form;\n};\nexports.default = createRequestBody;","map":{"version":3,"names":["defaultJsonSerializer_js_1","require","extract_files_1","form_data_1","__importDefault","isExtractableFileEnhanced","value","isExtractableFile","pipe","createRequestBody","query","variables","operationName","jsonSerializer","defaultJsonSerializer","clone","files","extractFiles","size","Array","isArray","stringify","Error","payload","reduce","accu","currentQuery","index","push","undefined","Form","FormData","default","form","append","map","i","forEach","paths","file","exports"],"sources":["/Users/divyashriravichandran/Desktop/Web Dev/Movie Info App/movie-info-app/node_modules/graphql-request/src/createRequestBody.ts"],"sourcesContent":["import { defaultJsonSerializer } from './defaultJsonSerializer.js'\nimport type * as Dom from './types.dom.js'\nimport type { Variables } from './types.js'\nimport type { ExtractableFile } from 'extract-files'\nimport { extractFiles, isExtractableFile } from 'extract-files'\nimport FormDataNode from 'form-data'\n\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nconst isExtractableFileEnhanced = (value: any): value is ExtractableFile | { pipe: Function } =>\n  isExtractableFile(value) ||\n  (value !== null && typeof value === `object` && typeof value.pipe === `function`)\n\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nconst createRequestBody = (\n  query: string | string[],\n  variables?: Variables | Variables[],\n  operationName?: string,\n  jsonSerializer = defaultJsonSerializer\n): string | Dom.FormData => {\n  const { clone, files } = extractFiles({ query, variables, operationName }, ``, isExtractableFileEnhanced)\n\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return jsonSerializer.stringify(clone)\n    }\n\n    if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n      throw new Error(`Cannot create request body with given variable type, array expected`)\n    }\n\n    // Batch support\n    const payload = query.reduce<{ query: string; variables: Variables | undefined }[]>(\n      (accu, currentQuery, index) => {\n        accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined })\n        return accu\n      },\n      []\n    )\n\n    return jsonSerializer.stringify(payload)\n  }\n\n  const Form = typeof FormData === `undefined` ? FormDataNode : FormData\n\n  const form = new Form()\n\n  form.append(`operations`, jsonSerializer.stringify(clone))\n\n  const map: { [key: number]: string[] } = {}\n  let i = 0\n  files.forEach((paths) => {\n    map[++i] = paths\n  })\n  form.append(`map`, jsonSerializer.stringify(map))\n\n  i = 0\n  files.forEach((paths, file) => {\n    form.append(`${++i}`, file as any)\n  })\n\n  return form as Dom.FormData\n}\n\nexport default createRequestBody\n"],"mappings":";;;;;;;;;;AAAA,MAAAA,0BAAA,GAAAC,OAAA;AAIA,MAAAC,eAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAC,eAAA,CAAAH,OAAA;AAEA;;;;AAIA,MAAMI,yBAAyB,GAAIC,KAAU,IAC3C,IAAAJ,eAAA,CAAAK,iBAAiB,EAACD,KAAK,CAAC,IACvBA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACE,IAAI,KAAK,UAAW;AAEnF;;;;;AAKA,MAAMC,iBAAiB,GAAGA,CACxBC,KAAwB,EACxBC,SAAmC,EACnCC,aAAsB,EACtBC,cAAc,GAAGb,0BAAA,CAAAc,qBAAqB,KACb;EACzB,MAAM;IAAEC,KAAK;IAAEC;EAAK,CAAE,GAAG,IAAAd,eAAA,CAAAe,YAAY,EAAC;IAAEP,KAAK;IAAEC,SAAS;IAAEC;EAAa,CAAE,EAAE,EAAE,EAAEP,yBAAyB,CAAC;EAEzG,IAAIW,KAAK,CAACE,IAAI,KAAK,CAAC,EAAE;IACpB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,EAAE;MACzB,OAAOG,cAAc,CAACQ,SAAS,CAACN,KAAK,CAAC;;IAGxC,IAAI,OAAOJ,SAAS,KAAK,WAAW,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACT,SAAS,CAAC,EAAE;MACjE,MAAM,IAAIW,KAAK,CAAC,qEAAqE,CAAC;;IAGxF;IACA,MAAMC,OAAO,GAAGb,KAAK,CAACc,MAAM,CAC1B,CAACC,IAAI,EAAEC,YAAY,EAAEC,KAAK,KAAI;MAC5BF,IAAI,CAACG,IAAI,CAAC;QAAElB,KAAK,EAAEgB,YAAY;QAAEf,SAAS,EAAEA,SAAS,GAAGA,SAAS,CAACgB,KAAK,CAAC,GAAGE;MAAS,CAAE,CAAC;MACvF,OAAOJ,IAAI;IACb,CAAC,EACD,EAAE,CACH;IAED,OAAOZ,cAAc,CAACQ,SAAS,CAACE,OAAO,CAAC;;EAG1C,MAAMO,IAAI,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAG5B,WAAA,CAAA6B,OAAY,GAAGD,QAAQ;EAEtE,MAAME,IAAI,GAAG,IAAIH,IAAI,EAAE;EAEvBG,IAAI,CAACC,MAAM,CAAC,YAAY,EAAErB,cAAc,CAACQ,SAAS,CAACN,KAAK,CAAC,CAAC;EAE1D,MAAMoB,GAAG,GAAgC,EAAE;EAC3C,IAAIC,CAAC,GAAG,CAAC;EACTpB,KAAK,CAACqB,OAAO,CAAEC,KAAK,IAAI;IACtBH,GAAG,CAAC,EAAEC,CAAC,CAAC,GAAGE,KAAK;EAClB,CAAC,CAAC;EACFL,IAAI,CAACC,MAAM,CAAC,KAAK,EAAErB,cAAc,CAACQ,SAAS,CAACc,GAAG,CAAC,CAAC;EAEjDC,CAAC,GAAG,CAAC;EACLpB,KAAK,CAACqB,OAAO,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAI;IAC5BN,IAAI,CAACC,MAAM,CAAC,GAAG,EAAEE,CAAC,EAAE,EAAEG,IAAW,CAAC;EACpC,CAAC,CAAC;EAEF,OAAON,IAAoB;AAC7B,CAAC;AAEDO,OAAA,CAAAR,OAAA,GAAevB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}